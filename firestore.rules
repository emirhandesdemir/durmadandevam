rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      // Ensure the user is signed in before checking their role.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper to check if only specific fields are being changed in an update.
    function isOnlyChangingFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    function isOnlyChangingField(field) {
      return isOnlyChangingFields([field]);
    }
    
    // Helper to verify that the only change in an array is the addition or removal of the requester's UID.
    function isOnlyAddingOrRemovingSelf(beforeList, afterList, uid) {
      let beforeSet = beforeList.toSet();
      let afterSet = afterList.toSet();
      // Case 1: Adding self. 'after' set must contain everything 'before' did, plus the new uid.
      let isAdding = afterSet.difference(beforeSet).hasOnly([uid]) && beforeSet.difference(afterSet).size() == 0;
      // Case 2: Removing self. 'before' set must contain everything 'after' did, plus the old uid.
      let isRemoving = beforeSet.difference(afterSet).hasOnly([uid]) && afterSet.difference(beforeSet).size() == 0;
      return isAdding || isRemoving;
    }
    
    // USERS
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId || isAdmin();
      
      allow update: if isSignedIn() && (
        // Scenario 1: User updating their own profile.
        // They can change anything EXCEPT their role.
        (request.auth.uid == userId && request.resource.data.role == resource.data.role)
         
        ||

        // Scenario 2: Another user following/unfollowing this target user.
        // The incoming 'followers' list must only differ by the requester's UID.
        // Also, no other fields (like username) can be changed at the same time.
        (request.auth.uid != userId &&
         isOnlyChangingField('followers') &&
         isOnlyAddingOrRemovingSelf(resource.data.followers, request.resource.data.followers, request.auth.uid))
         
        ||

        // Scenario 3: Another user sending a follow request to this target user.
        // This is only allowed if the target profile is private.
        (request.auth.uid != userId &&
         resource.data.privateProfile == true &&
         isOnlyChangingField('followRequests'))
         
        ||

        // Scenario 4: User is accepting/denying a follow request for their own profile.
        // This involves changing their own 'followers' and 'followRequests' lists.
        (request.auth.uid == userId &&
         isOnlyChangingFields(['followers', 'followRequests']))
      );

       // PROFILE VIEWERS subcollection
      match /profileViewers/{viewerId} {
        // A user can log their view on someone else's profile
        allow write: if request.auth.uid == viewerId;
        // Only the profile owner can read who viewed them
        allow read: if request.auth.uid == userId;
      }
    }

    // POSTS
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow delete: if resource.data.uid == request.auth.uid || isAdmin();
      
      // Allow owner to update text, and anyone to update likes.
      allow update: if isSignedIn() && (
        (resource.data.uid == request.auth.uid && isOnlyChangingField('text')) ||
        (isOnlyChangingFields(['likes', 'likeCount']))
      );
      
      // COMMENTS subcollection
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.uid || request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid || isAdmin());
      }
    }
    
    // ROOMS
    match /rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.createdBy.uid || isAdmin());
      
      allow update: if isSignedIn() && (
        // The owner can update any field except 'createdBy'
        (request.auth.uid == resource.data.createdBy.uid && request.resource.data.createdBy.uid == resource.data.createdBy.uid) ||
        // Any user can join by adding themselves to the participants list.
        (isOnlyChangingField('participants') && isOnlyAddingOrRemovingSelf(resource.data.participants, request.resource.data.participants, request.auth.uid))
      );

      // MESSAGES subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn();
        // Allow create if user is in the participants list
        allow create: if isSignedIn() && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.map(p => p.uid).hasAny([request.auth.uid]);
      }
      
      // VOICE PARTICIPANTS subcollection
      match /voiceParticipants/{participantId} {
        allow read: if isSignedIn();
        // Only the user themselves or the room owner can create/delete/update (join/leave/kick/mute)
        allow write: if isSignedIn() && (
            request.auth.uid == participantId ||
            request.auth.uid == get(/databases/$(database)/documents/rooms/$(roomId)).data.createdBy.uid
        );
      }
      
      // SIGNALS subcollection (for WebRTC)
      match /signals/{signalId} {
        allow read, write: if isSignedIn();
      }

      // GAMES subcollection
      match /games/{gameId} {
        allow read, write: if isSignedIn();
      }
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow create: if isSignedIn();
    }
    
    // DIRECT MESSAGES METADATA
    match /directMessagesMetadata/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
    }

    // DIRECT MESSAGES
    match /directMessages/{chatId}/messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        
        // Only the sender can edit their own message within 5 minutes.
        allow update: if isSignedIn() && request.auth.uid == resource.data.senderId && request.time < resource.data.createdAt + duration.value(5, 'm');
    }

    // CONFIG
    match /config/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}
