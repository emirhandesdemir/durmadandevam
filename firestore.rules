
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is part of a specific DM chat.
    function isDmParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids;
    }

    // Users Collection
    // Anyone authenticated can read user profiles.
    // A user can only create/update their own profile document. Server actions validate fields.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;

      // Notifications Subcollection: Only the parent user can manage their notifications.
      match /notifications/{notificationId} {
        allow read, update, delete: if request.auth.uid == userId;
        allow create: if true; // Allows Cloud Functions to write notifications.
      }
      
      // Profile Viewers Subcollection: Users can write their own view record. Only profile owner can read.
      match /profileViewers/{viewerId} {
          allow read: if request.auth.uid == userId;
          allow write: if request.auth.uid == viewerId; 
      }
    }
    
    // Posts Collection
    // Authenticated users can read posts.
    // Users can only create, update, or delete their own posts.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth.uid == resource.data.uid;
      
      // Comments Subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth.uid == resource.data.uid;
      }
    }
    
    // Rooms Collection
    // Rooms are public to read for any authenticated user.
    // All create, update, delete operations must be handled by secure server actions.
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      allow write: if false;
      
      // This also locks down subcollections from direct client writes.
      match /{subcollection}/{docId=**} {
        allow read, write: if false;
      }
    }
    
    // Direct Messages are private and secure.
    match /directMessagesMetadata/{chatId} {
      allow read, update: if isDmParticipant(chatId);
      // Create and delete are handled via server actions to ensure consistency.
      allow create, delete: if false;
    }
    match /directMessages/{chatId}/messages/{messageId} {
      // Users can only read/write messages in chats they are part of.
      allow read, write: if isDmParticipant(chatId);
    }
    
    // Admin & Config Collections
    match /config/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Written by Cloud Functions
    }
    match /reports/{reportId} {
        allow read: if isAdmin();
        allow create: if request.auth != null; // Any user can create a report
    }
  }
}
