rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all for safety
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can be read by any authenticated user, but only written by themselves.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Notifications are private to the user.
      match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
       // Profile viewers subcollection
      match /profileViewers/{viewerId} {
        allow read: if request.auth.uid == userId; // Only the profile owner can see who viewed them
        allow write: if request.auth.uid == viewerId; // Anyone can write their own view event
      }
    }

    // Configs can be read by authenticated users, but only written by admins.
    match /config/{docId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Posts can be read by anyone, created by authenticated users.
    // Update/delete is restricted to the post owner.
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.uid;
      allow delete: if request.auth.uid == resource.data.uid;

      // Comments on posts follow similar logic.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth.uid == resource.data.uid;
      }
    }

    // Rooms can be read by anyone.
    // Creation requires authentication.
    // Updates are complex and often handled by server-side logic/transactions for safety.
    // For now, allow updates if user is authenticated. Deletion only by owner.
    match /rooms/{roomId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null; 
        allow delete: if get(/databases/$(database)/documents/rooms/$(roomId)).data.createdBy.uid == request.auth.uid;

        // Room subcollections
        match /messages/{messageId} {
            allow read, create: if request.auth != null; // Simplified rule
            allow update, delete: if false; // Messages are immutable for now
        }
        match /voiceParticipants/{participantId} {
            allow read: if true;
            // Writes should be handled by secure server actions.
            allow create, update, delete: if false; 
        }
         match /games/{gameId} {
            allow read: if true;
            allow write: if request.auth != null; // Game state updates
        }
         match /signals/{signalId} {
            // Signals are transient and should only be readable/writable by the intended recipient via server logic.
            allow read, write: if request.auth != null;
        }
    }

    // Direct Messages are private between participants.
    // This rule is complex. It relies on the participantUids array being present.
    match /directMessagesMetadata/{chatId} {
      allow read, update: if request.auth.uid in resource.data.participantUids;
      allow create: if request.auth.uid in request.resource.data.participantUids;
    }

    match /directMessages/{chatId}/messages/{messageId} {
        // To read/write a message, you must be a participant in the chat.
        // We check the corresponding metadata document.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids;
        // Only the sender can edit their message.
        allow update: if request.auth.uid == resource.data.senderId;
        allow delete: if false; // Deleting messages is disabled for now.
    }

    // Audit logs are write-only for Cloud Functions and read-only for admins.
    match /auditLogs/{logId} {
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow write: if false; // Only server can write
    }
    
    // Reports can be created by any authenticated user.
    match /reports/{reportId} {
        allow create: if request.auth.uid == request.resource.data.reporterId;
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow write: if false;
    }
  }
}
