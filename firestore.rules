rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // config: Only admins can write, authenticated users can read.
    match /config/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // users: Can only be created for the logged-in user's UID.
    // Users can only update their own documents.
    // Deletion is not allowed.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // posts: Can be read by anyone authenticated.
    // Create/Update/Delete only by the post owner.
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.uid);
      allow update: if isOwner(resource.data.uid);
      allow delete: if isOwner(resource.data.uid) || isAdmin();

      // comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.uid);
        allow update: if isOwner(resource.data.uid);
        allow delete: if isOwner(resource.data.uid) || isOwner(get(/databases/$(database)/documents/posts/$(postId)).data.uid) || isAdmin();
      }
    }
    
    // notifications: Only the recipient can read/write their own notifications.
    match /notifications/{notificationId} {
        allow read, write: if isOwner(resource.data.recipientId);
        allow create: if isAuthenticated(); // Server action handles logic
    }

    // rooms: Authenticated users can read.
    // Only the creator can update or delete.
    // New rooms must have the creator as a participant.
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.createdBy.uid) && request.resource.data.createdBy.uid in request.resource.data.participants.map(p => p.uid);
      allow update: if isOwner(resource.data.createdBy.uid) || isAdmin();
      allow delete: if isOwner(resource.data.createdBy.uid) || isAdmin();

      // messages subcollection
      function isRoomParticipant() {
        return request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.map(p => p.uid);
      }
      
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isRoomParticipant() || request.resource.data.uid == 'system';
        allow update, delete: if false; // Messages are immutable
      }

      // voiceParticipants subcollection
       match /voiceParticipants/{userId} {
        allow read: if isAuthenticated();
        // User can add/remove themselves, or the room host/admin can remove them
        allow create, delete: if isOwner(userId) || isOwner(get(/databases/$(database)/documents/rooms/$(roomId)).data.createdBy.uid) || isAdmin();
        // User can only update their own doc
        allow update: if isOwner(userId);
       }
       
       // signals subcollection
       match /signals/{signalId} {
        // Signals are targeted. Only the recipient can read them.
        // The creator must be authenticated.
        allow read: if isOwner(resource.data.to);
        allow create: if isOwner(request.resource.data.from);
        allow delete: if isOwner(resource.data.to) || isOwner(request.resource.data.from);
        allow update: if false;
       }
       
       // games subcollection
       match /games/{gameId} {
         allow read: if isAuthenticated();
         // Only the host/admin can create/update games
         allow create, update: if isOwner(get(/databases/$(database)/documents/rooms/$(roomId)).data.createdBy.uid) || isAdmin();
         allow delete: if false;
       }
    }
  }
}
