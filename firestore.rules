rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Gets the data for the currently authenticated user.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Checks if the currently authenticated user is an admin.
    function isAdmin() {
      // Use `exists` to prevent errors if the user doc doesn't exist yet.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) 
             && getUserData().role == 'admin';
    }

    // Rate limiting function to prevent abuse from a single user.
    function isNotRateLimited(interval) {
        // Admins are not rate limited.
        if (isAdmin()) {
            return true;
        }
        let userProfile = getUserData();
        // If the user has no last action timestamp, they are not rate-limited.
        if (!('lastActionTimestamp' in userProfile)) {
            return true;
        }
        // Allow if the request time is after the cooldown period has passed.
        return request.time > userProfile.lastActionTimestamp + interval;
    }

    // --- Collections Rules ---

    match /users/{userId} {
      // Any user can read any profile.
      allow read: if true;
      // Anyone can create a user document (signup).
      allow create;
      // Users can only update their own document.
      allow update: if isUser(userId);
      // Only admins can delete users.
      allow delete: if isAdmin();
    }
    
    match /posts/{postId} {
      allow read: if true;
      // Allow post creation if authenticated and not rate-limited (10s cooldown).
      allow create: if isAuthenticated() && isNotRateLimited(duration.value(10, 's'));
      // Allow post update/delete only by owner or an admin.
      allow update, delete: if isAuthenticated() && (isUser(resource.data.uid) || isAdmin());
      
      match /comments/{commentId} {
          allow read: if true;
          // Allow comment creation if authenticated and not rate-limited (3s cooldown).
          allow create: if isAuthenticated() && isNotRateLimited(duration.value(3, 's'));
          // Only comment owner can delete it.
          allow delete: if isAuthenticated() && isUser(resource.data.uid);
      }
    }
    
    match /rooms/{roomId} {
        allow read: if true;
        // Allow room creation if authenticated and not rate-limited (2 min cooldown).
        allow create: if isAuthenticated() && isNotRateLimited(duration.value(120, 's'));
        // Updates are handled by server actions, checked there.
        allow update: if isAuthenticated();
        // Deletion by owner or admin.
        allow delete: if isAuthenticated() && (isUser(resource.data.createdBy.uid) || isAdmin());

        match /messages/{messageId} {
            allow read: if isAuthenticated();
            // Rate limit message creation (2s cooldown).
            allow create: if isAuthenticated() && isNotRateLimited(duration.value(2, 's'));
            allow update, delete: if isAuthenticated() && (isUser(resource.data.uid) || isAdmin());
        }
        match /{subcollection}/{docId} 
            where subcollection in ['voiceParticipants', 'signals', 'games'] {
            // Allow participants to perform actions in these subcollections
            allow read, write: if isAuthenticated();
        }
    }

    // Helper function to check if the current user is part of a DM chat.
    function isParticipant(chatId) {
        return get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids.hasAny([request.auth.uid]);
    }

    match /directMessagesMetadata/{chatId} {
        // Only participants can read/write metadata
        allow read, write: if isAuthenticated() && isParticipant(chatId);
    }
    match /directMessages/{chatId}/messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(chatId);
        // Rate limit DM creation (1s cooldown).
        allow create: if isAuthenticated() && isParticipant(chatId) && isNotRateLimited(duration.value(1, 's'));
        allow update, delete: if isAuthenticated() && isUser(resource.data.senderId);
    }
    
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /auditLogs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Only written by backend functions
    }
    
     match /reports/{reportId} {
        allow read: if isAdmin();
        // Rate limit reports (1 min cooldown).
        allow create: if isAuthenticated() && isNotRateLimited(duration.value(60, 's'));
    }
  }
}
