// Firestore Güvenlik Kuralları
// Bu kurallar, veritabanına kimin, ne koşullarda erişebileceğini tanımlar.
// "güvenli başlangıç" prensibiyle, varsayılan olarak tüm erişimler engellenmiştir.
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Hız Sınırlayıcı Fonksiyonu: Kullanıcıların belirli eylemleri
    // çok sık yapmasını engelleyerek spam ve kötüye kullanımı önler.
    function isRateLimited(userId, cooldownSeconds) {
      let lastAction = get(/databases/$(database)/documents/users/$(userId)).data.lastActionTimestamp;
      // Eğer kullanıcı daha önce hiç işlem yapmadıysa, izin ver.
      if (!lastAction) {
        return false;
      }
      // Son işlem ile şu anki zaman arasındaki fark, bekleme süresinden büyükse izin ver.
      return request.time > lastAction + duration.value(cooldownSeconds, "s");
    }

    // Kullanıcılar (users) koleksiyonu için kurallar
    match /users/{userId} {
      // Herkes kullanıcı profillerini okuyabilir.
      allow read: if true;
      // Sadece kimliği doğrulanmış kullanıcılar profil oluşturabilir.
      allow create: if request.auth != null;
      // Bir kullanıcı sadece kendi profilini güncelleyebilir.
      // Kritik alanların (rol, elmas) değiştirilmesi engellenmiştir.
      allow update: if request.auth.uid == userId
                    && !("role" in request.resource.data)
                    && !("diamonds" in request.resource.data);
      // Kullanıcı silme işlemi şimdilik kapalı, sadece admin paneli üzerinden yapılabilir.
      allow delete: if false;

      // Kullanıcının alt koleksiyonları için kurallar
      match /{subcollection}/{docId} {
        // Bir kullanıcı sadece kendi alt koleksiyonlarına (bildirimler vb.) erişebilir.
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // config koleksiyonu: Sadece adminler okuyabilir, yazma işlemi kapalı.
    match /config/{docId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if false; 
    }

    // Gönderiler (posts) koleksiyonu için kurallar
    match /posts/{postId} {
      // Herkes gönderileri okuyabilir.
      allow read: if true;
      // Sadece kimliği doğrulanmış ve hız limitine takılmayan kullanıcılar gönderi oluşturabilir.
      allow create: if request.auth != null && !isRateLimited(request.auth.uid, 10);
      // Bir kullanıcı sadece kendi gönderisini güncelleyebilir veya silebilir.
      allow update, delete: if resource.data.uid == request.auth.uid;

      // Yorumlar (comments) alt koleksiyonu için kurallar
      match /comments/{commentId} {
        // Herkes yorumları okuyabilir.
        allow read: if true;
        // Kimliği doğrulanmış ve hız limitine takılmayan kullanıcılar yorum yapabilir.
        allow create: if request.auth != null && !isRateLimited(request.auth.uid, 2);
        // Kullanıcı sadece kendi yorumunu silebilir.
        allow delete: if get(/databases/$(database)/documents/posts/$(postId)/comments/$(commentId)).data.uid == request.auth.uid;
      }
    }
    
    // Odalar (rooms) koleksiyonu için kurallar
    match /rooms/{roomId} {
        // Herkes odaların bilgilerini okuyabilir.
        allow read: if true;
        // Kimliği doğrulanmış kullanıcılar oda oluşturabilir.
        allow create: if request.auth != null;
        // Sadece oda sahibi güncelleyebilir.
        allow update: if resource.data.createdBy.uid == request.auth.uid;
        // Sadece oda sahibi odayı silebilir.
        allow delete: if resource.data.createdBy.uid == request.auth.uid;

        // Odaların alt koleksiyonları
        match /{subcollection}/{docId} {
           // Mesajlar, sinyaller gibi alt koleksiyonlara sadece kimliği doğrulanmış kullanıcılar erişebilir.
           allow read, write, delete: if request.auth != null;
        }
    }
    
    // Direkt Mesajlar (directMessages) için kurallar
    match /directMessages/{chatId}/{messages}/{messageId} {
        // Bir mesajı sadece o sohbetin katılımcıları okuyabilir, yazabilir veya silebilir.
        allow read, write, delete: if request.auth.uid in get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids;
    }
    
    // Direkt Mesaj Metadatası (directMessagesMetadata) için kurallar
    match /directMessagesMetadata/{chatId} {
        // Metadata'yı sadece sohbetin katılımcıları okuyabilir ve güncelleyebilir.
        allow read, update: if request.auth.uid in resource.data.participantUids;
        // Yeni bir sohbet (metadata) sadece katılımcılardan biri tarafından oluşturulabilir.
        allow create: if request.auth.uid in request.resource.data.participantUids;
    }
    
    // Raporlar (reports) koleksiyonu
    match /reports/{reportId} {
        // Kimliği doğrulanmış kullanıcılar rapor oluşturabilir.
        allow create: if request.auth != null;
        // Raporları sadece adminler okuyabilir.
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Raporlar silinemez.
        allow write, delete: if false;
    }
    
     // Denetim Kayıtları (auditLogs) koleksiyonu
    match /auditLogs/{logId} {
      // Sadece adminler denetim kayıtlarını okuyabilir.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Yazma işlemi Cloud Function'lar tarafından yapılır, kullanıcılar tarafından değil.
      allow write: if false;
    }
  }
}
