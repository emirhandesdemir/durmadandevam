rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isChangingOnly(allowedKeys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedKeys);
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);

      allow update: if isSignedIn() && (
        (
          isOwner(userId) &&
          request.resource.data.role == resource.data.role
        ) ||
        (
          !isOwner(userId) && (
            (isChangingOnly(['followers']) && request.resource.data.followers == resource.data.followers.union([request.auth.uid])) ||
            (isChangingOnly(['followers']) && request.resource.data.followers == resource.data.followers.difference(toSet([request.auth.uid]))) ||
            (isChangingOnly(['followRequests']))
          )
        )
      );

      allow delete: if false;

      match /profileViewers/{viewerId} {
        allow write: if isSignedIn() && request.auth.uid == viewerId;
        allow read: if isSignedIn() && isOwner(userId);
      }
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && (
        (request.auth.uid == resource.data.uid && isChangingOnly(['text'])) ||
        (isChangingOnly(['likes', 'likeCount']))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.uid;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (
          resource.data.uid == request.auth.uid ||
          get(/databases/$(database)/documents/posts/$(postId)).data.uid == request.auth.uid
        );
      }
    }

    match /notifications/{notificationId} {
      allow read, delete: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.recipientId == request.auth.uid && isChangingOnly(['read']);
    }
    
    match /rooms/{roomId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.createdBy.uid == request.auth.uid;
        allow update: if isSignedIn();
        allow delete: if isSignedIn() && resource.data.createdBy.uid == request.auth.uid;

        match /{path=**}/documents/{docId} {
            allow read, write: if isSignedIn();
        }
    }

    match /config/{docId} {
        allow read: if true;
        allow write: if false; // Admin console only
    }
     match /game_questions/{questionId} {
        allow read: if true;
        allow write: if false; // Admin only
    }
  }
}
