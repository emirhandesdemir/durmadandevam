rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    
    // Is the user authenticated?
    function isAuthenticated() {
      return request.auth != null;
    }

    // Is the user an admin?
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Is the user the owner of the resource?
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Rate limiting function to prevent spam/abuse
    function isNotWritingTooFast() {
        // Admins are not rate-limited
        if (isAdmin()) {
            return true;
        }
        let lastAction = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.lastActionTimestamp;
        // Allow if no previous action or if enough time has passed (e.g., 2 seconds)
        return lastAction == null || request.time > lastAction + duration.value(2, 's');
    }
    
    // Limits the number of documents that can be read in a single query
    function isQueryLimited(limit) {
      return request.query.limit <= limit;
    }

    // --- Collection Rules ---

    // USERS: Users can read public profiles.
    // They can only update their own profile.
    // Critical fields like 'role' and 'diamonds' cannot be changed by the user.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && !(
        'role' in request.resource.data || 
        'diamonds' in request.resource.data ||
        'isBanned' in request.resource.data
      );
      // Allow list operations but enforce a limit to prevent downloading the entire user base.
      allow list: if isAuthenticated() && isQueryLimited(30);

      // Subcollections
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      match /profileViewers/{viewerId} {
        allow read, write: if isOwner(userId) || isOwner(viewerId);
      }
    }
    
    // POSTS: Anyone can read posts. Only owners or admins can create, update, delete.
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated() && isQueryLimited(50);
      allow create: if isAuthenticated() && isNotWritingTooFast();
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.uid) || isAdmin());

      // COMMENTS: Subcollection of posts
      match /comments/{commentId} {
        allow read, list: if isAuthenticated();
        allow create: if isAuthenticated() && isNotWritingTooFast();
        allow delete: if isAuthenticated() && (isOwner(resource.data.uid) || isAdmin());
      }
    }
    
    // ROOMS: Rules for chat rooms
    match /rooms/{roomId} {
      allow read, list: if isAuthenticated() && isQueryLimited(50);
      allow create: if isAuthenticated() && isNotWritingTooFast();
      allow update: if isAuthenticated() && (isOwner(resource.data.createdBy.uid) || resource.data.moderators.hasAny([request.auth.uid]));
      allow delete: if isAuthenticated() && (isOwner(resource.data.createdBy.uid) || isAdmin());

      // Subcollections within rooms
      match /messages/{messageId} {
        allow read, list: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && isNotWritingTooFast() && get(/databases/$(database)/documents/rooms/$(roomId)).data.participants.hasAny([request.auth.uid]);
        allow update, delete: if isAuthenticated() && isOwner(resource.data.uid);
      }
      
      match /voiceParticipants/{participantId} {
         allow read: if isAuthenticated();
         allow create, delete, update: if isAuthenticated() && (isOwner(participantId) || get(/databases/$(database)/documents/rooms/$(roomId)).data.moderators.hasAny([request.auth.uid]));
      }

       match /signals/{signalId} {
         allow read, create, delete: if isAuthenticated();
       }
       
       match /games/{gameId} {
         allow read, write: if isAuthenticated();
       }
    }
    
    // DIRECT MESSAGES: Only participants can access their DMs.
    match /directMessagesMetadata/{chatId} {
      allow read, write: if isAuthenticated() && chatId.split('_').hasAny([request.auth.uid]);
      allow list: if isAuthenticated();
    }
    match /directMessages/{chatId}/messages/{messageId} {
      allow read, create: if isAuthenticated() && chatId.split('_').hasAny([request.auth.uid]) && isNotWritingTooFast();
      allow update, delete: if isAuthenticated() && isOwner(resource.data.senderId);
    }
    
    // CONFIG: Only admins can read/write configuration files.
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // REPORTS: Any authenticated user can create a report. Only admins can view them.
    match /reports/{reportId} {
      allow create: if isAuthenticated();
      allow read, write, delete, list: if isAdmin();
    }
    
    // AUDIT LOGS: Read-only for admins. Created by Cloud Functions.
    match /auditLogs/{logId} {
        allow read, list: if isAdmin();
        allow create, update, delete: if false; // Only backend can write
    }
  }
}
