rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- GENEL FONKSİYONLAR ---
    // Bir kullanıcının giriş yapıp yapmadığını kontrol eder.
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Bir kullanıcının belirli bir dokümanın sahibi olup olmadığını kontrol eder.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Bir kullanıcının 'admin' rolüne sahip olup olmadığını kontrol eder.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- USERS KOLEKSİYONU ---
    match /users/{userId} {
      // Herkes kendi profilini okuyabilir.
      // Herkes başkasının profilini (özel değilse) okuyabilir.
      allow read: if isSignedIn();
      
      // Herkes kendi profilini oluşturabilir (kayıt olma).
      allow create: if isOwner(userId);
      
      // Kullanıcılar sadece belirli alanları (username, photoURL, privateProfile vb.) güncelleyebilir.
      // Rollerini veya diamond'larını kendileri değiştiremezler.
      allow update: if isOwner(userId) && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'diamonds']));
      
      // Kullanıcı silme işlemi sadece admin'ler tarafından yapılabilir (sunucu eylemi üzerinden).
      allow delete: if isAdmin();
      
      // Bir kullanıcı, başka bir kullanıcının 'followers', 'following', veya 'followRequests'
      // alanlarını (takip etme/çıkarma işlemleri için) güncelleyebilir.
      // Bu kural, `followActions.ts` içindeki işlemleri güvence altına alır.
      match /users/{targetUserId} {
         allow update: if isSignedIn() && request.auth.uid != targetUserId
                      && request.resource.data.diff(resource.data).affectedKeys().hasAny(['followers', 'following', 'followRequests']);
      }
    }
    
    // --- POSTS KOLEKSİYONU ---
    match /posts/{postId} {
      // Herkes tüm gönderileri okuyabilir.
      allow read: if isSignedIn();
      
      // Sadece giriş yapmış kullanıcılar gönderi oluşturabilir.
      allow create: if isSignedIn() && isOwner(request.resource.data.uid);
      
      // Sadece gönderi sahibi metni güncelleyebilir veya admin'ler silebilir.
      allow update: if isSignedIn() && (isOwner(resource.data.uid) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']))
                      || (isOwner(resource.data.uid) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['likes', 'likeCount'])); // Like/Unlike işlemi için

      // Sadece gönderi sahibi veya admin'ler silebilir.
      allow delete: if isSignedIn() && (isOwner(resource.data.uid) || isAdmin());

      // Yorumlar alt koleksiyonu
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow delete: if isSignedIn() && (isOwner(resource.data.uid) || isAdmin());
      }
    }
    
    // --- ROOMS KOLEKSİYONU ---
    match /rooms/{roomId} {
       // Odaya katılmış herkes okuyabilir, adminler her zaman okuyabilir.
       allow read: if isSignedIn();
       
       // Sadece giriş yapmış kullanıcılar oda oluşturabilir.
       allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
       
       // Sadece oda sahibi veya adminler odayı silebilir.
       allow delete: if isSignedIn() && (isOwner(resource.data.createdBy.uid) || isAdmin());
       
       // Sadece odaya dahil olanlar (participants) katılımcı listesini güncelleyebilir (katılma işlemi).
       allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
       
        // Oda alt koleksiyonları
        match /{subcollection}/{docId} {
            // Sadece odaya dahil olanlar (participants) mesajları, sesli katılımcıları vs. okuyup yazabilir.
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.participants;
        }
    }
    
    // --- NOTIFICATIONS KOLEKSİYONU ---
    // Sunucu eylemleri üzerinden oluşturulur. İstemci doğrudan yazamaz.
    // **Performans Notu:** Etkili bildirim sorguları için Firestore'da şu kompozit indeksi oluşturun:
    // Koleksiyon ID: notifications, Alanlar: recipientId (Artan), createdAt (Azalan)
    match /notifications/{notificationId} {
        allow read: if isSignedIn() && isOwner(resource.data.recipientId);
        allow write: if false; // Sadece sunucu (admin SDK veya eylemler) yazabilir.
    }

    // --- DIRECT MESSAGES ---
    // **Performans Notu:** Etkili DM listesi sorguları için şu kompozit indeksi oluşturun:
    // Koleksiyon ID: directMessagesMetadata, Alanlar: participantUids (Dizi), lastMessage.timestamp (Azalan)
    match /directMessagesMetadata/{chatId} {
      // Sadece sohbete katılanlar metadata'yı okuyabilir.
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      // Yazma işlemi sadece sunucu eylemleri üzerinden yapılır.
      allow write: if false; 
    }
    
    match /directMessages/{chatId}/messages/{messageId} {
       // Sadece sohbete katılanlar mesajları okuyabilir.
      allow read: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids;
      
      // Sadece mesajı gönderen düzenleyebilir (belirli koşullarla sunucu eyleminde kontrol edilir).
      // Sadece gönderen veya alıcı yeni mesaj oluşturabilir (sunucu eyleminde kontrol edilir).
      allow write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/directMessagesMetadata/$(chatId)).data.participantUids;
    }
    
    // --- CONFIG KOLEKSİYONU (En Korumalı Alan) ---
    match /config/{configId} {
      // Sadece admin'ler okuyabilir ve yazabilir.
      allow read, write: if isAdmin();
    }
  }
}
