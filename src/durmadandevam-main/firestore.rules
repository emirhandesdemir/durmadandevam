rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user has the 'admin' role in their user document
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if !isAuthenticated(); // Let signup create the doc
      allow update: if isOwner(userId) || isAdmin();
      
      // Subcollections
      match /notifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
      match /profileViewers/{viewerId} {
        allow read: if isOwner(userId);
        allow write: if isAuthenticated() && request.auth.uid == viewerId;
      }
    }
    
    // Posts Collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && (isOwner(request.resource.data.uid) || isAdmin());

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow delete: if isAuthenticated() && (isOwner(resource.data.uid) || isAdmin());
      }
    }

    // Rooms Collection
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated(); // Allow updates for participants, etc.
      allow delete: if isAdmin() || isOwner(resource.data.createdBy.uid);
      
      // Subcollections
      match /messages/{messageId} {
        allow read, create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && isOwner(resource.data.uid);
      }
      match /voiceParticipants/{participantId} {
        allow read, create, delete: if isAuthenticated(); // Handled by server actions
      }
      match /game_sessions/{sessionId} {
         allow read, create, update, delete: if isAuthenticated(); // Handled by server actions
      }
       match /signals/{signalId} {
        allow create, read, delete: if isAuthenticated(); // For WebRTC
      }
       match /games/{gameId} {
         allow read, create, update, delete: if isAuthenticated();
      }
    }

    // Direct Messages
    match /directMessages/{chatId}/messages/{messageId} {
       allow read, create: if isAuthenticated() && chatId.split('_').includes(request.auth.uid);
       allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
    }
    match /directMessagesMetadata/{chatId} {
      allow read, update: if isAuthenticated() && chatId.split('_').includes(request.auth.uid);
    }
    
    // Reports Collection
    match /reports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Configuration Collections (gameSettings, featureFlags etc)
    match /config/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

     // Game Questions Collection
    match /game_questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Audit Logs
    match /auditLogs/{logId} {
       allow read: if isAdmin();
       allow create: if false; // Only from Cloud Functions
       allow update, delete: if false;
    }
  }
}
