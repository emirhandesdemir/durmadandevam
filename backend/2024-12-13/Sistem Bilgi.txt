# HiweWalk Sistem Bilgisi ve Mimarisi

Bu doküman, HiweWalk uygulamasının teknik yapısını, klasör mimarisini ve temel sistemlerin nasıl çalıştığını açıklamaktadır.

---

## 1. Teknoloji Stack'i

Uygulama, modern ve verimli bir web deneyimi sunmak için aşağıdaki teknolojiler üzerine kurulmuştur:

- **Framework:** Next.js (App Router ile)
- **Dil:** TypeScript
- **UI Kütüphanesi:** React
- **Veritabanı ve Kimlik Doğrulama:** Firebase (Firestore, Authentication, Storage)
- **Stil:** Tailwind CSS
- **UI Bileşenleri:** ShadCN UI
- **Yapay Zeka (AI):** Google Genkit

---

## 2. Klasör Yapısı ve Açıklamaları

Projenin ana klasör yapısı, sorumlulukların ayrılması prensibine göre düzenlenmiştir.

### `/src`

Ana uygulama kodlarının bulunduğu kök dizin.

#### `/src/app`
Next.js App Router'ın merkezi. Sayfa yönlendirmeleri, layout'lar ve global stiller burada yer alır.
- **`layout.tsx`**: Tüm uygulamanın kök layout'u. Dil, font ve ana context provider'ları (Auth, Theme) burada tanımlanır.
- **`globals.css`**: Global CSS stilleri, Tailwind katmanları ve tema (renk) değişkenleri burada tanımlanır.
- **`/(main)`**: Ana uygulama sayfalarını (giriş yapıldıktan sonra erişilen) gruplayan dizin.
  - **`layout.tsx`**: Ana uygulama sayfaları için geçerli olan layout (örn: Header, BottomNav).
  - **`/home/page.tsx`**: Ana sayfa (gönderi akışı).
  - **`/rooms/[id]/page.tsx`**: Dinamik sohbet odası sayfası.
  - **`/profile/[uid]/page.tsx`**: Dinamik kullanıcı profili sayfası.
  - **`/requests/page.tsx`**: Gelen takip isteklerinin yönetildiği sayfa.
  - **`/notifications/page.tsx`**: Beğeni, yorum ve yeni takipçi bildirimlerinin listelendiği sayfa.
- **`/admin`**: Yönetim paneli sayfalarını gruplayan dizin.
- **`/login`, `/signup`**: Giriş ve kayıt sayfaları.

#### `/src/components`
Yeniden kullanılabilir React bileşenlerinin bulunduğu yer.
- **`/ui`**: ShadCN tarafından otomatik olarak oluşturulan temel UI bileşenleri (Button, Card, Input vb.).
- **`/auth`**: Kimlik doğrulama formları (`login-form`, `signup-form`).
- **`/posts`**: Gönderi sistemiyle ilgili bileşenler (`PostCard`, `NewPostForm`).
- **`/profile`**: Profil sayfalarında kullanılan bileşenler (`ProfileHeader`, `FollowButton`, `FollowListDialog`).
- **`/notifications`**: Bildirim sistemiyle ilgili bileşenler (`NotificationList`, `NotificationItem`).
- **`/layout`**: Genel layout bileşenleri (`Header`, `BottomNav`).

#### `/src/contexts`
Uygulama genelinde state (durum) yönetimi için kullanılan React Context'leri.
- **`AuthContext.tsx`**: Kullanıcı kimlik doğrulama durumunu, Firestore'dan gelen kullanıcı verilerini (`userData`) ve özellik bayraklarını (`featureFlags`) yönetir ve tüm uygulamaya sağlar.

#### `/src/lib`
Yardımcı fonksiyonlar, konfigürasyonlar ve sunucu eylemleri (server actions).
- **`firebase.ts`**: Firebase projesinin başlatılması ve konfigürasyonu.
- **`types.ts`**: Uygulama genelinde kullanılan TypeScript arayüzleri (interface) ve türleri.
- **`/actions`**: Sunucuda çalışan ve Firestore ile etkileşime giren fonksiyonlar. Bu, istemci kodunu daha temiz tutar ve güvenliği artırır.
  - `postActions.ts`: Gönderi beğenme, silme gibi işlemleri ve bildirim oluşturmayı yönetir.
  - `commentActions.ts`: Yorum ekleme, silme gibi işlemleri ve bildirim oluşturmayı yönetir.
  - `followActions.ts`: Takip etme, takipten çıkma, istek yönetimi gibi işlemleri ve bildirim oluşturmayı yönetir.
  - `notificationActions.ts`: Bildirim oluşturma ve okundu olarak işaretleme gibi merkezi bildirim işlemlerini yönetir.

---

## 3. Ana Sistemlerin Çalışma Prensibi

### Kimlik Doğrulama ve Güvenlik
1.  **Firebase Kuralları (`firestore.rules` ve `firebase-rules.txt`):** Uygulamanın bel kemiğidir. Veritabanı ve depolama erişimi, sunucuda zorunlu kılınan bu kurallarla sıkı bir şekilde kontrol edilir. Örneğin, bir kullanıcı sadece kendi profilini güncelleyebilir, sadece bir odanın katılımcıları o odaya mesaj gönderebilir ve sadece yöneticiler sistem ayarlarını değiştirebilir. Bu, istemci tarafı kodunun manipüle edilmesine karşı en güçlü savunmadır.
2.  **Kimlik Doğrulama Akışı**:
    - Kullanıcı `login` veya `signup` sayfalarından Firebase Authentication ile giriş yapar.
    - `AuthContext`, `onAuthStateChanged` ile kullanıcının oturum durumunu anlık olarak takip eder.
    - Kullanıcı giriş yaptığında, `AuthContext` aynı zamanda Firestore'daki `users` koleksiyonundan o kullanıcının dokümanını (`userData`), `config` koleksiyonundan `featureFlags` ve `notifications` koleksiyonundan okunmamış bildirim olup olmadığını dinlemeye başlar.
    - Tüm bu veriler, `useAuth()` hook'u ile uygulama genelinde kullanılabilir hale gelir.

### Takip ve Bildirim Sistemi
1.  **Veritabanı Yapısı**: Her kullanıcının `users` koleksiyonundaki dokümanında `followers` (takipçiler), `following` (takip edilenler), `privateProfile` (gizli hesap durumu) ve `followRequests` (takip istekleri) dizileri bulunur.
2.  **Takip Etme**:
    - **Herkese Açık Profil**: Bir kullanıcı "Takip Et" butonuna tıkladığında, `followActions.ts` içindeki `followUser` eylemi tetiklenir. Bu eylem, her iki kullanıcının da `followers` ve `following` dizilerini atomik bir `writeBatch` işlemiyle günceller. Aynı zamanda `notificationActions.ts` üzerinden takip edilen kullanıcıya bir 'follow' tipinde bildirim gönderir.
    - **Gizli Profil**: "Takip İsteği Gönder" butonuna tıklandığında, `followUser` eylemi bu durumu anlar ve karşı tarafın `followRequests` dizisine istek gönderen kullanıcının bilgilerini ekler.
3.  **İstek Yönetimi**:
    - Kullanıcı, `/requests` sayfasına giderek `followRequests` dizisindeki istekleri görür.
    - "Onayla" butonuna tıklandığında, `handleFollowRequest` eylemi tetiklenir. Bu eylem, isteği diziden kaldırır, takipçi/takip edilen listelerini günceller ve istek gönderen kullanıcıya "isteğiniz kabul edildi" şeklinde bir bildirim gönderir.
4.  **Beğeni/Yorum Bildirimleri**:
    - Bir kullanıcı bir gönderiyi beğendiğinde (`likePost` eylemi) veya yorum yaptığında (`addComment` eylemi), bu eylemler ilgili veritabanı işlemini yaptıktan sonra **atomik bir işlemle** aynı anda ilgili kullanıcıya bir bildirim dokümanı oluşturur.
    - Bu işlem, gönderi sahibinin `hasUnreadNotifications` bayrağını `true` olarak işaretler.
5.  **Bildirimleri Görüntüleme**:
    - Kullanıcı `/notifications` sayfasına girdiğinde, `NotificationList` bileşeni kullanıcının okunmamış bildirimlerini çeker ve `markNotificationsAsRead` eylemini tetikleyerek `hasUnreadNotifications` bayrağını `false` yapar. Bu, `Header`'daki bildirim noktasının sönmesini sağlar.
